#!/usr/bin/env node
'use strict'

/**
 * Module dependencies
 */
const fs = require('fs')
const minimist = require('minimist')
const update = require('update-notifier')
const chalk = require('chalk')
const pathExists = require('path-exists')
const figures = require('figures')
const log = require('log-update')
const table = require('text-table')
const execa = require('execa')
const co = require('co')
const semver = require('semver')
const pkg = require('./package')

update({pkg}).notify()

const cli = minimist(process.argv.slice(2), {
	'--': true,
	'alias': {
		n: 'node',
		h: 'help',
		v: 'version'
	}
})
/**
 * Print help
 */
if (cli.help) {
	console.log([
		'',
		'Usage:',
		'',
		'  --node/-n [version]:  Add a node version to test',
		'  -- [command]:         The test command you expect',
		'  --disable-badge:      Disable auto-update testen badge',
		''
	].join('\n'))
	process.exit()
}

/**
 * Print version
 */
if (cli.version) {
	console.log(pkg.version)
	process.exit()
}

/**
 * Test script
 */
const testScript = cli['--'].length === 0 ? 'npm test' : cli['--'].join(' ')

/**
 * Update badge
 */
function updateBadge(msg) {
	let finalStatus = 0
	if (typeof msg === 'number') {
		finalStatus = msg
	} else {
		msg.every(m => {
			if (m) {
				finalStatus = 1
				return false
			}
			return true
		})
	}
	if (!cli['disable-badge'] && pathExists.sync('./README.md')) {
		const badge = finalStatus === 0 ?
			'https://img.shields.io/badge/testen-passing-brightgreen.svg' :
			'https://img.shields.io/badge/testen-failed-red.svg'
		let content = fs.readFileSync('./README.md', 'utf8')
		content = content.replace(
			/!\[testen badge\]\(.*\)/,
			`![testen badge](${badge})`
		)
		fs.writeFileSync('./README.md', content, 'utf8')
	}
	process.exit(finalStatus)
}

co(function* main () {
	/**
	 * Get default node version
	 */
	const getDefaultNodeVersion = yield execa.shell('node -v')
	const defaultNodeVersion = getDefaultNodeVersion.stdout.substring(1).trim()

	/**
	 * Get input node versions and sort them
	 */
	let nodeVersions = cli.node
	if (!nodeVersions) {
		nodeVersions = [defaultNodeVersion]
	}
	if (typeof nodeVersions === 'string') {
		nodeVersions = [nodeVersions]
	}
	nodeVersions.sort((a, b) => semver.gt(a, b))

	/**
	 * Generate initial result and log as table
	 */
	const result = nodeVersions.map(v => {
		return ['  ' + chalk.gray(figures.circle), v, chalk.gray('running')]
	})
	log('\n' + table(result) + '\n')

	/**
	 * Running test for each version of node
	 */
	let msg = []
	const res = yield nodeVersions.map((v, index) => {
		return execa.shell(`source ~/.nvm/nvm.sh && nvm exec ${v} ${testScript}`)
			.catch(e => {
				msg[index] = `${chalk.bold('Error occurs when testing in')} ${v}\n\n${e.stack}\n\n`
			})
	})
	log('\n' + msg.join('\n') + table(res.map((r, index) => {
		return [
			'  ' + (msg[index] ? chalk.red(figures.cross) : chalk.green(figures.tick)),
			nodeVersions[index],
			msg[index] ? chalk.red('failed') : chalk.green('success')
		]
	})) + '\n')

	updateBadge(msg)

	// EOF
}).catch(e => {
	log.clear()
	updateBadge(1)
	console.log(e.stack)
})
